const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const getAllUsers = async (search, page, size) => {
  try {
    page = page || 1;
    size = size || 10;
    const offset = (page - 1) * size;

    // Build dynamic WHERE condition
    let whereClause = '';
    let params = [];

    if (search) {
      whereClause = 'WHERE username LIKE @search';
      params.push({ name: 'search', value: `%${search}%` });
    }

    // Query for paginated data
    const usersList = await prisma.$queryRawUnsafe(`
      SELECT *
      FROM m_user_master
      ${whereClause}
      ORDER BY createdate DESC
      OFFSET ${offset} ROWS FETCH NEXT ${size} ROWS ONLY
    `, ...params.map(p => p.value));

    // Query for total count
    const totalCountResult = await prisma.$queryRawUnsafe(`
      SELECT COUNT(*) as count
      FROM m_user_master
      ${whereClause}
    `, ...params.map(p => p.value));

    const totalCount = totalCountResult[0]?.count || 0;

    return {
      data: usersList,
      currentPage: page,
      size,
      totalPages: Math.ceil(totalCount / size),
      totalCount,
    };
  } catch (error) {
    console.error(error);
    throw new Error("Error retrieving users");
  }
};
